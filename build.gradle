group "io.opentracing.contrib"
version = "1.0-SNAPSHOT"

buildscript {
    // Build Variables
    ext {
        kotlinVersion = '1.3.11'
        jvmCompatVersion = 1.8

        versionsPluginVersion = '0.20.0'
        kotlinterVersion = '1.20.1'
    }

    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.jmailen.gradle:kotlinter-gradle:$kotlinterVersion"
        classpath "com.github.ben-manes:gradle-versions-plugin:$versionsPluginVersion"
    }
}

repositories {
    jcenter()
}

apply plugin: 'java'
apply plugin: 'kotlin'

// This plugin adds Gradle tasks to compare dependency versions against what's most up to date and generate a report
apply plugin: 'com.github.ben-manes.versions'

// This plugin adds Gradle tasks that allow you to require ktlint to pass
// in order for the build to succeed.
apply plugin: 'org.jmailen.kotlinter'

apply plugin: 'maven-publish'

sourceCompatibility = jvmCompatVersion
targetCompatibility = jvmCompatVersion

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"

    def openTracingVersion = '0.33.0'
    implementation "io.opentracing:opentracing-api:$openTracingVersion"
    testImplementation "io.opentracing:opentracing-mock:$openTracingVersion"

    def jaegerVersion = "0.35.0"
    implementation "io.jaegertracing:jaeger-client:$jaegerVersion"

    testCompile 'org.jetbrains.kotlin:kotlin-test-junit'
}

compileKotlin {
    kotlinOptions.jvmTarget = "$jvmCompatVersion"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "$jvmCompatVersion"
}

// Should match .editorconfig
kotlinter {
    indentSize = 4
    continuationIndentSize = 4
}

task fix {
    dependsOn tasks.formatKotlin
}

// If check and fix are both to be run, make sure that fix always runs first
tasks.check.mustRunAfter tasks.fix
